#include <stdint.h>

## for namespace in entdlr.namespaces
namespace {{ namespace.name }}
{
## for enum in namespace.enums
    /// {{ enum.comment }}
    enum class {{ enum.name }} : {{ enum.type }}
    {
## for e in enum.values
        {{ e.name }} = {{ e.value }}{% if loop.is_last == true %},{% endif %}
## endfor
    };

## endfor

## for union in namespace.unions
    /// {{ union.comment }}
    union {{ union.name }}
    {
## for t in union.types
        {{ t.name }}{% if t.isArray == true and t.arraySize > 0 %}[{{ t.arraySize }}]{% endif %}{% if loop.is_last == true %},{% endif %}
## endfor
    };
## endfor

## for struct in namespace.structs
    /// {{ struct.comment }}
    class {{ struct.name }}
    {
    public:
## for field in struct.fields
        {{ field.type }} {{ field.name }}{% if field.isArray == true and field.arraySize > 0 %}[{{ field.arraySize }}]{% endif %}; /// {{ field.comment }}
## endfor

## for method in struct.methods
        /// {{ method.comment }}
        {% if method.isStatic == true %}static {% endif %}{{ method.returnType }} {{ method.name }} (
## for parameter in method.parameters
            {% if parameter.constant == true %}const {% endif %}{{ parameter.type }}& {{ paramerter.name }}{% if loop.is_last == false %},{% endif %}
## endfor
        );

## endfor
    };

## endfor

## for interface in namespace.interfaces
    /// {{ interface.comment }}
    class {{ interface.name }} : public Interface
    {
    public:
## for method in interface.methods
        /// {{method.comment}}
        {% if method.isStatic == true %}static {% endif %}{{method.returnType}} {{method.name}} (
## for parameter in method.parameters
        {% if paramerter.constant == true %}const {% endif %}{{ paramerter.type }}& {{ parameter.name }}{% if loop.is_last == false %},{% endif %}
## endfor
        );

## endfor
    };
## endfor
};
## endfor
##
